{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "I1VRs4tZkbvW"
   },
   "source": [
    "# **House price prediction using Linear Regression-multipleVariable**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SAFLqwkKk8rK"
   },
   "source": [
    "### *Import Libraries*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 703,
   "metadata": {
    "id": "EgF2lvr_jzVL"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6gXowmSom462"
   },
   "source": [
    "### *Load Dataset*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 704,
   "metadata": {
    "id": "6JLDHSdym6wP"
   },
   "outputs": [],
   "source": [
    "dataset = pd.read_csv('practiceDataset.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-DdkIy1ZnDfA"
   },
   "source": [
    "### *Load Summarize*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 705,
   "metadata": {
    "id": "OlElQViRnGFp"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1460, 81)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n",
       "0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n",
       "2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n",
       "3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n",
       "\n",
       "  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0   2008        WD         Normal     208500  \n",
       "1   2007        WD         Normal     181500  \n",
       "2   2008        WD         Normal     223500  \n",
       "3   2006        WD        Abnorml     140000  \n",
       "4   2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 705,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(dataset.shape)\n",
    "dataset.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-Zb9xIa-kOx5"
   },
   "source": [
    "### *Finding & Removing NA values from our Features X*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 706,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   object \n",
      " 3   LotFrontage    1201 non-null   float64\n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   object \n",
      " 6   Alley          91 non-null     object \n",
      " 7   LotShape       1460 non-null   object \n",
      " 8   LandContour    1460 non-null   object \n",
      " 9   Utilities      1460 non-null   object \n",
      " 10  LotConfig      1460 non-null   object \n",
      " 11  LandSlope      1460 non-null   object \n",
      " 12  Neighborhood   1460 non-null   object \n",
      " 13  Condition1     1460 non-null   object \n",
      " 14  Condition2     1460 non-null   object \n",
      " 15  BldgType       1460 non-null   object \n",
      " 16  HouseStyle     1460 non-null   object \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   object \n",
      " 22  RoofMatl       1460 non-null   object \n",
      " 23  Exterior1st    1460 non-null   object \n",
      " 24  Exterior2nd    1460 non-null   object \n",
      " 25  MasVnrType     1452 non-null   object \n",
      " 26  MasVnrArea     1452 non-null   float64\n",
      " 27  ExterQual      1460 non-null   object \n",
      " 28  ExterCond      1460 non-null   object \n",
      " 29  Foundation     1460 non-null   object \n",
      " 30  BsmtQual       1423 non-null   object \n",
      " 31  BsmtCond       1423 non-null   object \n",
      " 32  BsmtExposure   1422 non-null   object \n",
      " 33  BsmtFinType1   1423 non-null   object \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1422 non-null   object \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   object \n",
      " 40  HeatingQC      1460 non-null   object \n",
      " 41  CentralAir     1460 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   object \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   object \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    770 non-null    object \n",
      " 58  GarageType     1379 non-null   object \n",
      " 59  GarageYrBlt    1379 non-null   float64\n",
      " 60  GarageFinish   1379 non-null   object \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1379 non-null   object \n",
      " 64  GarageCond     1379 non-null   object \n",
      " 65  PavedDrive     1460 non-null   object \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         7 non-null      object \n",
      " 73  Fence          281 non-null    object \n",
      " 74  MiscFeature    54 non-null     object \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   object \n",
      " 79  SaleCondition  1460 non-null   object \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(35), object(43)\n",
      "memory usage: 924.0+ KB\n"
     ]
    }
   ],
   "source": [
    "dataset.info()\n",
    "# dataset.isnull() #gives T/F value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 707,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Id                 0\n",
      "MSSubClass         0\n",
      "MSZoning           0\n",
      "LotFrontage      259\n",
      "LotArea            0\n",
      "                ... \n",
      "MoSold             0\n",
      "YrSold             0\n",
      "SaleType           0\n",
      "SaleCondition      0\n",
      "SalePrice          0\n",
      "Length: 81, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(dataset.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 708,
   "metadata": {
    "id": "UwyBQ5nZkTpf",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['LotFrontage', 'Alley', 'MasVnrType', 'MasVnrArea', 'BsmtQual',\n",
       "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n",
       "       'Electrical', 'FireplaceQu', 'GarageType', 'GarageYrBlt',\n",
       "       'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence',\n",
       "       'MiscFeature'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 708,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.columns[dataset.isna().any()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 709,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 709,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ploting a heatmap to observe the null values\n",
    "sns.heatmap(dataset.isnull(),yticklabels= False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-    axis : {0 or 'index', 1 or 'columns'}** , default 0\n",
    "        Determine if rows or columns which contain missing values are\n",
    "        removed.\n",
    "    \n",
    "        * 0, or 'index' : Drop rows which contain missing values.\n",
    "        * 1, or 'columns' : Drop columns which contain missing value.\n",
    "    \n",
    "        .. versionchanged:: 1.0.0\n",
    "    \n",
    "           Pass tuple or list to drop on multiple axes.\n",
    "           Only a single axis is allowed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-     how : {'any', 'all'}, default 'any'\n",
    "        Determine if row or column is removed from DataFrame, when we have\n",
    "        at least one NA or all NA.\n",
    "    \n",
    "        * 'any' : If any NA values are present, drop that row or column.\n",
    "        * 'all' : If all values are NA, drop that row or column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 710,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ways to drop a column/nan values\n",
    "\n",
    "# df.drop(\"Cabin\",axis=1,inplace=True) #if inplace is False it doesn't affect the original data \n",
    "# df.dropna(inplace=True)\n",
    "#del df[\"cabin\"]\n",
    "#df.pop(\"cabin\") #returns the poped item as well\n",
    "#df.truncate(\"cabin,axis=)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 711,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Remove column name 'A'\n",
    "# df.drop(['A'], axis = 1)\n",
    "\n",
    "# # Remove two columns name is 'C' and 'D'\n",
    "# df.drop(['C', 'D'], axis = 1)\n",
    "\n",
    "# # Remove three columns as index base\n",
    "# df.drop(df.columns[[0, 4, 2]], axis = 1, inplace = True)\n",
    "\n",
    "# # Remove all columns between column index 1 to 3\n",
    "# df.drop(df.iloc[:, 1:3], inplace = True, axis = 1)\n",
    "\n",
    "# # Remove all columns between column name 'B' to 'D'\n",
    "# df.drop(df.ix[:, 'B':'D'].columns, axis = 1\n",
    "        \n",
    "# # Remove all columns between column name 'B' to 'D'\n",
    "# df.drop(df.loc[:, 'B':'D'].columns, axis = 1)\n",
    "        \n",
    "# # Different loc() and iloc() is iloc() exclude last column\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # to select a column\n",
    "# result = df[\"City\"]\n",
    "\n",
    "# # select multiple columns\n",
    "# result = df[[\"Name\", \"Age\", \"Salary\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1460, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>2Story</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>2Story</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>266500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>142125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1460 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MSSubClass MSZoning  LotFrontage  LotArea HouseStyle  OverallQual  \\\n",
       "0             60       RL         65.0     8450     2Story            7   \n",
       "1             20       RL         80.0     9600     1Story            6   \n",
       "2             60       RL         68.0    11250     2Story            7   \n",
       "3             70       RL         60.0     9550     2Story            7   \n",
       "4             60       RL         84.0    14260     2Story            8   \n",
       "...          ...      ...          ...      ...        ...          ...   \n",
       "1455          60       RL         62.0     7917     2Story            6   \n",
       "1456          20       RL         85.0    13175     1Story            6   \n",
       "1457          70       RL         66.0     9042     2Story            7   \n",
       "1458          20       RL         68.0     9717     1Story            5   \n",
       "1459          20       RL         75.0     9937     1Story            5   \n",
       "\n",
       "      OverallCond  SalePrice  \n",
       "0               5     208500  \n",
       "1               8     181500  \n",
       "2               5     223500  \n",
       "3               5     140000  \n",
       "4               5     250000  \n",
       "...           ...        ...  \n",
       "1455            5     175000  \n",
       "1456            6     210000  \n",
       "1457            9     266500  \n",
       "1458            6     142125  \n",
       "1459            6     147500  \n",
       "\n",
       "[1460 rows x 8 columns]"
      ]
     },
     "execution_count": 713,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dataset.drop(\"Alley\",axis=1)\n",
    "# dataset.head(5)\n",
    "#inplace=True\n",
    "New_dataset = dataset[[\"MSSubClass\",\"MSZoning\",\"LotFrontage\",\"LotArea\",\"HouseStyle\",\"OverallQual\",\"OverallCond\",\"SalePrice\"]]\n",
    "print(New_dataset.shape)\n",
    "New_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 8 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   MSSubClass   1460 non-null   int64  \n",
      " 1   MSZoning     1460 non-null   object \n",
      " 2   LotFrontage  1201 non-null   float64\n",
      " 3   LotArea      1460 non-null   int64  \n",
      " 4   HouseStyle   1460 non-null   object \n",
      " 5   OverallQual  1460 non-null   int64  \n",
      " 6   OverallCond  1460 non-null   int64  \n",
      " 7   SalePrice    1460 non-null   int64  \n",
      "dtypes: float64(1), int64(5), object(2)\n",
      "memory usage: 91.4+ KB\n"
     ]
    }
   ],
   "source": [
    "New_dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSSubClass       0\n",
      "MSZoning         0\n",
      "LotFrontage    259\n",
      "LotArea          0\n",
      "HouseStyle       0\n",
      "OverallQual      0\n",
      "OverallCond      0\n",
      "SalePrice        0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(New_dataset.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['LotFrontage'], dtype='object')"
      ]
     },
     "execution_count": 716,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "New_dataset.columns[New_dataset.isna().any()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 717,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(New_dataset.isnull(),yticklabels= False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\harit\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:1773: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_column(ilocs[0], value, pi)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>2Story</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>2Story</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>266500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>142125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1460 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MSSubClass MSZoning  LotFrontage  LotArea HouseStyle  OverallQual  \\\n",
       "0             60       RL         65.0     8450     2Story            7   \n",
       "1             20       RL         80.0     9600     1Story            6   \n",
       "2             60       RL         68.0    11250     2Story            7   \n",
       "3             70       RL         60.0     9550     2Story            7   \n",
       "4             60       RL         84.0    14260     2Story            8   \n",
       "...          ...      ...          ...      ...        ...          ...   \n",
       "1455          60       RL         62.0     7917     2Story            6   \n",
       "1456          20       RL         85.0    13175     1Story            6   \n",
       "1457          70       RL         66.0     9042     2Story            7   \n",
       "1458          20       RL         68.0     9717     1Story            5   \n",
       "1459          20       RL         75.0     9937     1Story            5   \n",
       "\n",
       "      OverallCond  SalePrice  \n",
       "0               5     208500  \n",
       "1               8     181500  \n",
       "2               5     223500  \n",
       "3               5     140000  \n",
       "4               5     250000  \n",
       "...           ...        ...  \n",
       "1455            5     175000  \n",
       "1456            6     210000  \n",
       "1457            9     266500  \n",
       "1458            6     142125  \n",
       "1459            6     147500  \n",
       "\n",
       "[1460 rows x 8 columns]"
      ]
     },
     "execution_count": 718,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "New_dataset.loc[:,'LotFrontage'] = New_dataset.loc[:,'LotFrontage'].fillna(New_dataset.loc[:,'LotFrontage'].mean()).astype(float)\n",
    "New_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "metadata": {
    "id": "8LxSw9aHlJTC",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 719,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "New_dataset.columns[New_dataset.isna().any()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>2Story</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>2Story</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>266500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>142125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>1Story</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1460 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MSSubClass MSZoning  LotFrontage  LotArea HouseStyle  OverallQual  \\\n",
       "0             60       RL         65.0     8450     2Story            7   \n",
       "1             20       RL         80.0     9600     1Story            6   \n",
       "2             60       RL         68.0    11250     2Story            7   \n",
       "3             70       RL         60.0     9550     2Story            7   \n",
       "4             60       RL         84.0    14260     2Story            8   \n",
       "...          ...      ...          ...      ...        ...          ...   \n",
       "1455          60       RL         62.0     7917     2Story            6   \n",
       "1456          20       RL         85.0    13175     1Story            6   \n",
       "1457          70       RL         66.0     9042     2Story            7   \n",
       "1458          20       RL         68.0     9717     1Story            5   \n",
       "1459          20       RL         75.0     9937     1Story            5   \n",
       "\n",
       "      OverallCond  SalePrice  \n",
       "0               5     208500  \n",
       "1               8     181500  \n",
       "2               5     223500  \n",
       "3               5     140000  \n",
       "4               5     250000  \n",
       "...           ...        ...  \n",
       "1455            5     175000  \n",
       "1456            6     210000  \n",
       "1457            9     266500  \n",
       "1458            6     142125  \n",
       "1459            6     147500  \n",
       "\n",
       "[1460 rows x 8 columns]"
      ]
     },
     "execution_count": 720,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "New_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 721,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(New_dataset.isnull(),yticklabels= False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(New_dataset.MSSubClass , New_dataset.SalePrice , color = 'green',marker='*')\n",
    "plt.xlabel(\"MSSubClass\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(New_dataset.LotFrontage , New_dataset.SalePrice , color = 'blue',marker='*')\n",
    "plt.xlabel(\"LotFrontage\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(New_dataset.LotArea , New_dataset.SalePrice , color = 'red',marker='*')\n",
    "plt.xlabel(\"LotArea\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZgAAAEGCAYAAABYV4NmAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAqYUlEQVR4nO3df7ScVX3v8feHBEgIAgmECAkaMKkKrb84BNS77C3BkN6q0BZsSJW0ZjXWhV5tLV2glSzC9QfaK5Ze4ZoaJFj5EaIWtEUaQ8XeSoED0iJimigUIwhpgxBAA4Hv/WPv6Zkz58w5Z5J5fmTm81rrrGee75nnmX2GMN95nr33dysiMDMz67Z9qm6AmZn1JicYMzMrhBOMmZkVwgnGzMwK4QRjZmaFmFx1A+risMMOi7lz51bdDDOzvcpdd931HxExc7TfOcFkc+fOZXBwsOpmmJntVST9e7vf+RaZmZkVwgnGzMwK4QRjZmaFcIIxM7NCOMGYmVkhnGDMzPrZE8BxedtlTjBmZv3sb4HvA3/X/VM7wZiZ9aOlwIHAsrx/dt5f2r2XcIIxM+tHq4CXMDTdfjLwUuCi7r2EE4yZWT+aR0oyz+b9Z4ELgZd17yWcYMzM+tFSYAnwQt5/Ie/7FpmZme2RVcBRwJS8P4V0y8y3yMzMbI/MAz4F7AKm5e0n8S0yMzPrgnWk5HJh3l7f3dO7XL+ZWb86F/hLYBbwDuDH3T29E4yZWb86oenxrPzTRb5FZmZmhXCCMTOzQjjBmJlZIZxgzMysEIUlGEkvl3RP08+Tkj4gaYakDZI25+30pmPOl7RF0iZJpzbFj5d0b/7dpZKU4/tLui7Hb5c0t+mYZfk1NktahpmZlaqwBBMRmyLiNRHxGuB44Bngq8B5wMaImA9szPtIOpZUqOA4YDFwmaRJ+XSXAyuA+flncY4vBx6PiHnAJcDF+VwzgJXAicACYGVzIjMzs+KVdYtsIfDDiPh34DRgbY6vBU7Pj08Dro2InRHxALAFWCDpCOCgiLgtIgK4quWYxrnWAwvz1c2pwIaI2B4RjwMbGEpKZmZWgrISzBLgmvx4VkQ8ApC3h+f4bIZP89maY7Pz49b4sGMiYhdpTbZDxzjXMJJWSBqUNLht27bd/uPMzGykwhOMpP2AtzF+EQKNEosx4rt7zFAgYnVEDETEwMyZM8dpnpmZdaKMK5hfB+6OiEfz/qP5thd5+1iObyXV9myYAzyc43NGiQ87RtJk4GBg+xjnMjOzkpSRYM5i6PYYwI0MLdK5DLihKb4kjww7mtSZf0e+jbZD0km5f+XslmMa5zoDuCX309wMLJI0PXfuL8oxMzMrSaG1yCQdALwZeHdT+BPAOknLgYeAMwEi4j5J64DvkwpHnxMRz+dj3gNcCUwFbso/AGuAL0raQrpyWZLPtV3SRcCd+XmrImJ7IX+kmZmNSukLvw0MDMTg4GDVzTAz26tIuisiBkb7nWfym5lZIZxgzMysEE4wZmZWCCcYMzMrhBOMmZkVwgnGzMwK4QRjZmaFcIIxM7NCOMGYmVkhnGDMzKwQTjBmZlYIJxgzMyuEE4yZWT97Ajgub7vMCcbMrJ/9LWmRlL/r/qmdYMzM+tFS4ECGlmw8O+8v7d5LOMGYmfWjVcBLgH3z/r7AS4GLuvcSTjBmZlUosO9jQuaRksxzwLS8vRB4WfdewgnGzKwKBfZ9TNg6UnK5MG+v7+7pnWDMzMpUQt/HhJ0LbAI+mLfndvf0hSYYSYdIWi/pB5Lul/R6STMkbZC0OW+nNz3/fElbJG2SdGpT/HhJ9+bfXSpJOb6/pOty/HZJc5uOWZZfY7OkZZiZ1UEJfR8TdgIwKz+eBQx09/RFX8H8BfCNiHgF8GrgfuA8YGNEzAc25n0kHQssId2VXAxcJmlSPs/lwApgfv5ZnOPLgccjYh5wCXBxPtcMYCVwIrAAWNmcyMzMKlNC30ddFJZgJB0EvAlYAxARz0bEz4DTgLX5aWuB0/Pj04BrI2JnRDwAbAEWSDoCOCgibouIAK5qOaZxrvXAwnx1cyqwISK2R8TjwAaGkpKZWbUK7vuoiyKvYI4BtgFfkPRdSZ+XNA2YFRGPAOTt4fn5s4EfNx2/Ncdm58et8WHHRMQu0niMQ8c41zCSVkgalDS4bdu2PflbzcwmruC+j7ooMsFMBl4HXB4RrwWeJt8Oa0OjxGKM+O4eMxSIWB0RAxExMHPmzDGaZmbWRScAU0gdAlPoet9HXRSZYLYCWyPi9ry/npRwHs23vcjbx5qef1TT8XOAh3N8zijxYcdImgwcDGwf41xmZvVQh2HKBSsswUTET4EfS3p5Di0kvZ03MjRAbxlwQ358I7Akjww7mtSZf0e+jbZD0km5f+XslmMa5zoDuCX309wMLJI0PXfuL8oxM7Nq1WmYcsEmF3z+9wFfkrQf8CPg90lJbZ2k5cBDwJkAEXGfpHWkJLQLOCcins/neQ9wJTAVuCn/QBpA8EVJW0hXLkvyubZLugi4Mz9vVURsL/IPNTObkFXAPcCDpE+6KocpF0zpC78NDAzE4OBg1c0ws36wHjgL2B/YCVxDugezF5J0V0SM2ovkmfxmZmXrk2HKRd8iMzOzVucCf0maPf8Ohk+q6CFOMGZmZTuh6fEshsq19BjfIjMzq0LV5fpLaIcTjJlZFeoyD8ZLJpuZ9Yi6zIPxkslmZj2mLuX6vWSymVmPqUu5fi+ZbGbWZXXoXK/LPJiC2+FhymbWX5o7tc+qqA11mQdTcDt8BWNm/aEunetQ+FLFdWmHE4yZ9Ye6dK73EScYM+sPdelc7yNOMGbWP+rSud4n3MlvZv2jLp3rfcIJxsz6R58UmawL3yIzM7NCOMGYmVkhCk0wkh6UdK+keyQN5tgMSRskbc7b6U3PP1/SFkmbJJ3aFD8+n2eLpEslKcf3l3Rdjt8uaW7TMcvya2yWtAwzszqpQ0WBgpVxBfNrEfGapjWbzwM2RsR8YGPeR9KxwBLSW74YuEzSpHzM5cAKYH7+WZzjy4HHI2IecAlwcT7XDGAlcCKwAFjZnMjMzCpXl3L9BariFtlpwNr8eC1welP82ojYGREPAFuABZKOAA6KiNsiIoCrWo5pnGs9sDBf3ZwKbIiI7RHxOLCBoaRkZladOlUUKFjRCSaAv5d0l6QVOTYrIh4ByNvDc3w2wwcNbs2x2flxa3zYMRGxi3SxeegY5xpG0gpJg5IGt23bttt/pJnZhPVRRYGiE8wbI+J1wK8D50h60xjP1SixGCO+u8cMBSJWR8RARAzMnDlzjKaZmXVJo6LAs6RPqmfp2YoChSaYiHg4bx8DvkrqD3k03/Yibx/LT98KHNV0+Bzg4RyfM0p82DGSJgMHA9vHOJeZWfXWAfuRvvbuR89WFCgswUiaJulFjcfAIuB7wI0M3X1cBtyQH98ILMkjw44mdebfkW+j7ZB0Uu5fObvlmMa5zgBuyf00NwOLJE3PnfuLcszMrFpLga+RaqGRtzfSk30wRc7knwV8NY8ongxcHRHfkHQnsE7ScuAh4EyAiLhP0jrSuIpdwDkR8Xw+13uAK4GpwE35B2AN8EVJW0hXLkvyubZLugi4Mz9vVURsL/BvNTObmFXAPcCDpE+6fYGjqa4P5gngDcB3SPeAukjpC78NDAzE4OBg1c0ws36wnrTY2f7ATuAa0j2YKlwN/G7e7sYCbJLuapqGMoxn8puZla0OVZ0bw6XPzvvvpOvDpV3s0sysbHWo6ty4VbcFeJ50udHl4dK+gjEzK1sdlky+APgRwwcb/BD4SPdeYsIJRtJLJZ2SH09tjBAzM7O90A5S/0+znTneJRNKMJL+gNQt9bkcmgP8TfeaYWZmpboEaJ1ffjjwme69xESvYM4B3gg8CRARmxkq8WJmZnubeYysHvCyUWJ7YKIJZmdEPNvYybPmPb7ZzGx3VV2ufylwR0vsdro6imyiCeZWSR8Cpkp6M2lQ3de61wwzsz5Tdbn+RtHNKXl/CpWNIjsP2AbcC7yb9Jb8WfeaYWZWkjpcOdShXP884FOkagLK209SyS2yqcAVEXFmRJwBXJFjZmZ7l7pcOTQ+fQuYfzJh60ilaiJvuzzhc6IJZiPDE8pU4JvdbYqZWYFKmLk+IY35J41e7Wfp+vyTCWkU3WxuR5eLbk40wUyJiKcaO/nxAd1rhplZwepy5bCKVKK/2X4VtePoprbsBxzT3XZMNME8Lel1jR1JxwM/714zzMwKVsLM9QmZB3wImESqQzYJ+DDlLzhWwsJnE00wHwCul/SPkv4RuA54b/eaYWZWsNGuHPanmr6Pu0m35y7M27sraAMUvvDZhIpdRsSdkl4BvJyU634QEc+Nc5iZWX2cwsgyKE8CC0lrs5TpXOCjwOmkVauqGNHW6IPZlfebFz67ujsvMeYVjKST8/a3gLcCv0RaafKtOWZmtndYw8hPvH1IY2LLdgJwK2k027eppthlow9m37y/L6X3wfxq3r51lJ+3dK8ZZmYFW0he87bJWcDJJbejMZrtD/P+u6luHswq0pXLtLztch/MmLfIImKlpH2AmyJiXfde1sysAt9u2b+1gjbsAJ5hqNjW83m/i1WMJ6yx8NlHSFcu19PVlTXH7eSPiBdwh76Z7e2WkuqRTMr7k/J+2VcOlwBHtsRm09UqxhN2LqkP6Iq8Pbe7p5/oKLINkv5E0lGSZjR+JnKgpEmSvivp63l/hqQNkjbn7fSm554vaYukTZJObYofL+ne/LtLJSnH95d0XY7fLmlu0zHL8mtslrQMM+tvq0h9DA0i3Q4qexTZPOCo/Lgxqu0oyh+mDKkv6E5SX9AgXe8LmmiCeRepZP+3gbvyz+AEj30/cH/T/nnAxoiYT6oQcB6ApGNJd0iPAxYDl0lqfNe4HFhBGmAwP/8eYDnweETMI30vuDifawawEjgRWACsbE5kZtaHTiF9Ej2f93eRPlgXVtCWafnn+abHZSuhJtqEEkxEHD3KzzHjHSdpDvAbwOebwqcBa/PjtaSBeo34tRGxMyIeIK0UvUDSEcBBEXFbRARwVcsxjXOtBxbmq5tTgQ0RsT0iHgc2MJSUzKwfrSFdtTQT1Ywi+zjwdlKC+Z28X7ZGZYPmUWRlVlOWdKKkf5H0lKTbJL2yw/N/BvhT4IWm2KyIeAQgbxsLl80Gftz0vK05Njs/bo0POyYidpFGkx86xrla/74VkgYlDW7btq3DP83M9irLGbmKVZDuz5RpLum+yhfy/hWkW1VzS25H8ygyUcgosvGuYD4L/AnpQ/vTdNANJektwGMRcddEDxklFmPEd/eYoUDE6ogYiIiBmTNb1w41s66rslR+u+JWZRe9WsPotciquJJaRxpLHHlbcjXlfSJiQ75tdT0jV3AeyxuBt0l6ELgWOFnSXwOP5tte5O1j+flbGer6ApgDPJzjc0aJDzsmr7J5MLB9jHOZWZWqLJV/NaPfIrum5HYsZOS43PdSzXycrwE78/5OSq+mfIik32r8jLLfVkScHxFzImIuqfP+loh4B+lPaHQrLQNuyI9vBJbkkWFHkzrz78i30XZIOin3r5zdckzjXGfk1wjgZmCRpOm5c39RjplZFeqwyNZCRnamT6OaD/ZPt8Q+TfnDpXeQkkrj3k7k/S7OxxmvFtmtpFn7o+0H8JXdeM1PAOskLQceAs4EiIj7JK0jfb/ZBZwTEY3xHu8BriStQ3NT/oF0sflFSVtIVy5L8rm2S7qINAAPYFVEbN+NtppZN6wC7gEeIP3fPZnyS+UvBZ5qiT1FV2tvTUi7D/CyJ1peAnwX+ElTrMvzcZS+8NvAwEAMDk505LWZdWw9acTUC6R7J9fR1Vnj49pCKn7106Y2vJg0+aLMOShTgV+MEp9C+f1BbwBuI/UBPQu8HvhOZ6eQdFdEjDqDZkLDlCXNkrRG0k15/9h8BWJmNr6lpPsLjfGkL+T9Mm8LnULqiW1uw8OUPw/m1W3irymzEdkBwIuAj+Vtl+fjTHSi5ZWkPoxGgYN/I60RY2Y2vlWkYTdT8v4U0hyMMm+RtZu5N+6Mvi5rN1TqsFJbkXwc2Ax8MG+7PB9nognmsFzs8gX4rzknz499iJlZNg/4FKn/ZVrefpJyb02tBg5qiR0E/FWJbaibE4BZ+fEsKisV87SkQ8njDSSdRDUj2c1sb9Wo3Hth3nZ5zsW4LiAtMNbsScpfMvkShgpuNkyimmKXBZvQipbAH5OGBL9M0j+RLvLK7J4zs73ducBfkr4pv4PhtTbKUJfRWxcwvLYJef8jlDuarQQTXTL5bkm/ytCSyZu8ZLKZdeSEpsezGLo1029WkWbyPdMUm0r5VZ1LMGaCGWMy5S9JIiJ2Zx6MmVn/uoBU96vZc/TlFcxbx/jd7k60NLN+9QRp7sV3SIWd+tEq4OsMTzL9eAUTEb9fVkPMrA801yI7q+K2VOUURvb7PEmaj/Ng6a0pNOlPtJMfSb9BqoPaGMlORKzqbnPMrCctJQ0TasxgfyfwB8DbKO+20Dc7jBdlDfBmhtd3r2pdGig06U90Jv//JRV5eB/prTiTVEnIzGx8jcWtmpVdi+yADuNFWcjID/KzqKboZh1WtATeEBFnk5YnvpBUseaocY4xM0talyt+nvKXK17XJl72fJy5jLxqu5ryFxyrekXLJo0SbM9IOpI0D/fo7jXDzHpaHcq0LGTkJ94+lH/lUIf3AoZWtGysB/Mspa9o2fB1SYeQijvcRSq6fW33mmFmPa0OZVqmMfoExy4XeBzXbR3Gi9JagPR5ul6AdMwEI+kESS+OiIsi4mekO3T3ki4qL+leM8ysp81j5JCifSm3FtmvtIm/qsQ2AHyuTbzsmmglFCAd7wrmc6QLJyS9ibRY2OdIA9tWd68ZZtbT5pKWBGz2n5Tb73Bnm/gdJbYB4F1t4r9XZiMYKkD6HGno1nN0vQDpeAlmUtNKkL8DrI6IL0fER3LzzMzGV4d+h9YCk+PFi9J6m268eJHWkRYbi7zt8oCHcROMpMaF7ULglqbfTXgOjZn1uU0dxovQ2gc0Xrwo7W7JtVuIrChLga8xVFHgOdJcpRKHKV8D3CrpBtJIsn8EkDSPccr1S5oi6Q5J/yLpPkkX5vgMSRskbc7b6U3HnC9pi6RNkk5tih8v6d78u0slKcf3l3Rdjt8uaW7TMcvya2yWtAwzq85VbeJfLLENdammvL7DeFFWkcYCNw9TPoby+mAi4qOktc6uBP5bRDTmnu5DmnQ5lp3AyRHxatJioIvzOjLnARsjYj6wMe8j6VjSGIbjgMXAZZIaF6+XAyuA+flncY4vJ83NmUcadHBxPtcMYCVwIrAAWNmcyMysZAsZWT35xZQ/RLgO2nUulDngAYaGKT9HGkn3HOUPU46If46Ir0bE002xf4uIu8c5LiLiqby7b/4J4DRgbY6vBU7Pj08Dro2InRHxALAFWCDpCOCgiLgtJ7irWo5pnGs9sDBf3ZwKbIiI7RHxOLCBoaRkZmWbCzzaEvsp5U8urIu5pAKXf563Vc0qLHgRuInOg9ktkiZJugd4jPSBfzswKyIeAcjbw/PTZzN8CaKtOTY7P26NDzsmL+P8BHDoGOdqbd8KSYOSBrdt27YHf6mZjWkNI3ttJ1Nu/a0XdRgv0jrSbMIP5m27KgNFO5fUD/bBvD23u6cvNMFExPMR8RpgDulq5JfHeLpGO8UY8d09prl9qyNiICIGZs6cOUbTzGyPLCfV/2i2i/ZDdovQrnO97HkwkBZfm8JQ+eCBCtrQaEfj1uWs7rej0ATTkCdpfot0m+rRfNuLvH0sP20rw+ubzQEezvE5o8SHHZNHux1MGm3f7lxmVoWfdxgvwq0dxovWXMW4RxWWYCTNzOVlkDSVVO7uB6SBcI1RXctIi4eS40vyyLCjSZ35d+TbaDsknZT7V85uOaZxrjOAW3I/zc3AIknTc+f+ohwz609PkL4tjzn2s0BXM/K+gkjjVMtSl/knJVQxrosi57IcAazNI8H2AdZFxNcl3Qask7QceIhU+p+IuE/SOlJO3wWcExGN2qvvIY1kmwrclH8g3dn9oqQtpCuXJflc2yVdxNDc3VVNE0bN+s/1pP+z1pNuV5VtDSNvUgfwefpvJNkq4B7gh3l/H8pfuqAkGhp53N8GBgZicHCw6maYdVdjoa9nGOqdPIByF/qCNFt+tCuFfRgq4V+00XpmG8r8GFxKWmx+Z1Nsf+C3KPe/SZdIuisiRu29KaUPxswqsoOh5ELePkP5kwvrUqalDlaRyrI024+evIJxgjGz4rW7ehjrqqJXzQM+1BL7MOVPtCyBE4xZL7uEdPul2RTgM+U3xbKlwJ+1xD5MT3byO8FYb6p61FRdzGNkaZJ5lP9t+bkO40Woy1XUDkZf+Kzs25YlcIKx3tQHcwwmZCnpfWh2H+V/W27XiV5m53q7MbNl14W/BDiyJTabnryqdIKx3tJHcwwm5FZG/7Zc9uTCt7eJLymxDXW4ioJ0BfmS/LjR2X8U7oMxq71VpP95m0uQ9+gcgwm5itFrgJVZJh/g623iN5bYhnafdlV8Ch5AqoH2sbydVkEbSuAEY72lhBLke5U1jJxn8jxpgmOZnukwXoS6zOQH+DiwmVRkcnPe70FOMNZ7Ci5BvldZxcj/y/eh/Cu6qW3iB5TaivqoS7HLgjnBWO8puAT5XuUURr+CWVhyO9oVtSzzCuaTbeJ/XmIbmvXBQBSXislcKsZ6Ul3Ko9ShHXVoAwyV79lJqro4mTRXqezyPV3iUjFmVal6Pk67zuMe7VTeK/TRQBQnGLMirSXdBrmqotd3gqmfPhqI4gRjVoTGfJwP5P33U818nHa3XMpch8VG6pOBKE4wZkW4FXia4VWMn6b8CY7t1n4pc6niunhFm/grS21F0icDUZxgzIpQlwmOdViquC6ebBOvon/sBGBWfjwLD1M2sw4sJ40QaraL8q8cHusw3sta/3uMF7c95gRjVoQ1beJXlNqK1O/TSbyXtbtS6feK2wUqLMFIOkrSP0i6X9J9kt6f4zMkbZC0OW+nNx1zvqQtkjZJOrUpfryke/PvLpWkHN9f0nU5frukuU3HLMuvsVnSMszKtBA4tSW2mPLXn3+qw3gv84i60hV5BbML+GBEvBI4CThH0rHAecDGiJgPbMz75N8tIc0aWAxcJqmxoOrlwApgfv5ZnOPLgccjYh6pCPbF+VwzgJXAicACYGVzIjMr3FLg5pbYN+jfqs51sK5NvEdHcNVBYQkmIh6JiLvz4x3A/aRVD04jzQ4gb0/Pj08Dro2InRHxALAFWCDpCOCgiLgtUtmBq1qOaZxrPbAwX92cCmyIiO0R8TiwgaGkZFa8HYycOS7KX1SqThWEq/a2NvG3ltqKvlLKP7N86+q1wO3ArIh4BFISAg7PT5sN/LjpsK05Njs/bo0POyYidpHuph46xrnMynE3I8uPRI6XqU4VhKv2qg7jtscKTzCSDgS+DHwgItoNFITRKwXFGPHdPaa5bSskDUoa3LZt2xhNM+vQyzuMW/G+SKr51Wx/4K8raEufKDTBSNqXlFy+FBFfyeFH820v8rYxYHIraV23hjnAwzk+Z5T4sGMkTQYOBraPca5hImJ1RAxExMDMmTN39880G6ndhMqyJ1rakAtIBSab7QQ+UkFb6qTAenlFjiITabDm/RHx6aZf3cjQgrbLgBua4kvyyLCjSZ35d+TbaDsknZTPeXbLMY1znQHckvtpbgYWSZqeO/cXMbLL1aw4kzqMW/Gc9EdX4LIBRV7BvBF4J3CypHvyz/8APgG8WdJm4M15n4i4jzTO4/uk8TbnRERjJYv3kNbg2wL8ELgpx9cAh0raAvwxeURaRGwn1Sa9M/+syjHrF1VXMX5dm/jxpbbCmvm25XCNenmNr+hn0/V6eV4PJvN6MD3mauB38/asCl6/LmuPuB1DZjPKjXLgSOAnJbWhTraQRtY9SCodNBU4mnRfqIPKzl4PxvpH41vZ2Xn/nVRTxdjqx1cww5WwbIATjPWWxmJOjX/Z+1DNYk6HdBi34m3qMN4PCl42wAnGessFwI9I38bI2x9S/kihn3UYt+K52OVIBS8b4ARjvWUVsF9LbH96cjla69BxHcb7wQnAFNJ7MIWuLxvgBGO95QLgFy2xn+O5DuZil+3spcOUzcq3ivRNrNlUfAVjqRzuaPXhPlN+U2qhhGHKTjDWW+YBH2Log0R5v4sjY2wvNQ84piX2Mvr330ZjQMy+eX9fuj4gxgnGestc4HyG5lYEafrt3IraY0nr8tHjxYsyl6Er3Cn0978LD1O2vU7VM+hbv6GOF7dy1GEE11Lgn5pecxfw/+jvOVIepmx7lQI7DCfEHbn11G4m/1gz/LttFWmmevMtoWPo7/45D1O2vUIJHYYT8s0O41aOduVgyixXU8Itob3OCcCs/HgWHqZsNVVCh+GEtA5RHi9u5Tiow3hRCr4lZMM5wVh3NH87FNV9O6zDrRgbqXXo+HjxohR8S8iGc4Kx7llHunKJvK3i22EdbsXYSO0GfZQ9GKTgmes2nBOMdcdS4GsMrRi4k1T2u+w+mLoMh7XhVreJf77UViRVD0TpI04w1h2NETqNFRsnUc0InToMh62TAzuMF+UbbeJlfsjXZSBKH3GCse6oSxVjG+6pDuNF2dFhvAh1GYjSR5xgrDtcxdjGcgnwopbYiyi3DpiHKZfOCca6wzXAbCzzGCqL3/gi8suU/+/Dw5RLVViCkXSFpMckfa8pNkPSBkmb83Z60+/Ol7RF0iZJpzbFj5d0b/7dpZKU4/tLui7Hb5c0t+mYZfk1Nktq3HG1Ii0F/ozhNcA+jO9vV21Sh/EiTSNdtXwsb6uoruBhyqUq8grmSmBxS+w8YGNEzAc25n0kHQssIX3HWQxcJqnxv8DlwApgfv5pnHM58HhEzCNdgF+czzUDWAmcCCwAVjYnMivIDuCFltgLlHuP3UZ6vsN4kT4ObCZ9uG/O+2UreOa6DVdYgomIbwPbW8KnAWvz47XA6U3xayNiZ0Q8AGwBFkg6AjgoIm6LiACuajmmca71wMJ8dXMqsCEitkfE48AGRiY667ZLgCNbYrPp37U26qK132O8eJH84d53yu6DmRURjwDk7eE5Phv4cdPztubY7Py4NT7smIjYRZqydegY5xpB0gpJg5IGt23btgd/lnEB8EhL7GE8iqxq7T7E/eFuJahLJ/9ohTxijPjuHjM8GLE6IgYiYmDmzJkTaqi1cSuj3yK7teR2vLLDeK/b1GHcrIvKTjCP5tte5O1jOb4VOKrpeXNI33+35set8WHHSJoMHEy6JdfuXFakukxwvL/DeK9rvaocL160qtcLslKVnWBuZGge7TLghqb4kjwy7GhSZ/4d+TbaDkkn5f6Vs1uOaZzrDOCW3E9zM7BI0vTcub8ox6xIx3UYt3LUpYpxg8u09JUihylfA9wGvFzSVknLgU8Ab5a0GXhz3ici7iONUP8+qajEORHRGOfyHlLFoi2kueE35fga4FBJW4A/Jo9Ii4jtpOl9d+afVTlmRfKtmOH27zBelNd1GC+Ky7T0JaUv/TYwMBCDg4NVN2PvNYuhG57NDgceLbEdY5XlL/Of+iRG9klB+kpX5hDh2Yx+g/hI4CcltmML8DbgQeDnwFRS7bob8WTcvZykuyJi1GEjdenkt73d1W3i15TaitQT10m8KL/SJv6qUlsBL+8wXhSXaelLTjDWHWvaxMsux/7lNvGvlNqKNDOrk3hRVjNy1v4k4K9Kbge4TEsfcoLphjqMjHmIdH//oYpevw7VciHVdxjNu0ptBZzSJr6w1FakK4dGSZZGojmQaq4cXKal7zjBdEMdRsZcDDwLfKqi178EOKQlNp3yZ/If02G8KHVpB6TbYdNI/0amUf7tsQbP5O87TjB7og4jY+aSOrYvy/v/J+/PLbENkGbyP9kSe4LyZ/KvZmQRxWmUf0uoXSHHKgo8fpY0/vKDefvZCtpgfckJZk/UYQGjNYxch2U/4IoS2wDpvZjSEptK+evBnAI83RJ7mvJvTdWJrxysIk4we6IOI2MWAu9tib0XOLnENkC6gnmuJfYs5V/B1OXW1CUMffFo2BcX/7S+4gSzp+owMmZd3r6lZb9Mo13BTKH8K5jVjJylfhDl3yKbx1BfR+MK8xV4WK71FSeYPXUuqV7AFXlbxciY/wXcC3wtbz9aQRsaK1ruQ+oD2oe04FjZH6jzgMktsckVtAPS7ajmBbZmjf10s17T+r+ideoE0iTD7wODwFkVtGEZQ0Olv0NairYKd5OGSv+cdPVyd0XteBmp32Vnbs+8itrxcVIf3SzgHQxfRMKsD/gKZk/UYRRZQ9VDpZeSrqAa/TDPkcqAlP1eLCVdxT2b958F/rWCdoA7163vOcHsiTqMIqtLkltFqi3V/F4cQ/l9MDtIVy6NumOR9710s1npnGD2RB1GkdUhyUE93gvw0s1mNeIEs6eqHkVWlw92qP69gPR+vCQ/bozeOgqP3jKrgBPMnqpDfaU6fLBDPd4LgAMYPnqritnzZub1YBr26vVg7mRotNKjpNFK/dyh7PfDrDRjrQfjYcq94ISmx7PwfAu/H2a14FtkZmZWiJ5OMJIWS9okaYuk86puj5lZP+nZBCNpEqkw+a8DxwJnSTq22laZmfWPnk0wwAJgS0T8KCKeBa4FTqu4TWZmfaOXE8xshld/2ppj/0XSCkmDkga3bdtWauPMzHpdL48i0yixYWOyI2I1qcA7krZJ+vcyGlagw4D/qLoRNeL3Yzi/H0P8Xgy3J+/HS9v9opcTzFbSHO6GOcDD7Z4cETMLb1HBJA22G4/ej/x+DOf3Y4jfi+GKej96+RbZncB8SUdL2g9YQqrva2ZmJejZK5iI2CXpvcDNwCTgioi4r+JmmZn1jZ5NMAAR8XdUt0JKFVZX3YCa8fsxnN+PIX4vhivk/XAtMjMzK0Qv98GYmVmFnGDMzKwQTjA9QNJRkv5B0v2S7pP0/qrbVDVJkyR9V9LXq25L1SQdImm9pB/kfyOvr7pNVZL0R/n/k+9JukbSlKrbVCZJV0h6TNL3mmIzJG2QtDlvp3fjtZxgesMu4IMR8UrgJOAc113j/cD9VTeiJv4C+EZEvAJ4NX38vkiaDfxPYCAifpk0wnRJta0q3ZXA4pbYecDGiJgPbMz7e8wJpgdExCMRcXd+vIP0ATJ77KN6l6Q5wG8An6+6LVWTdBDwJmANQEQ8GxE/q7RR1ZsMTJU0mbT+adsJ2L0oIr4NbG8JnwaszY/XAqd347WcYHqMpLnAa4HbK25KlT4D/CnwQsXtqINjgG3AF/Itw89L6ttFpCPiJ8CfAw8BjwBPRMTfV9uqWpgVEY9A+sIKHN6NkzrB9BBJBwJfBj4QEU9W3Z4qSHoL8FhE3FV1W2piMvA64PKIeC3wNF26/bE3yn0LpwFHA0cC0yS9o9pW9S4nmB4haV9ScvlSRHyl6vZU6I3A2yQ9SFqi4WRJf11tkyq1FdgaEY0r2vWkhNOvTgEeiIhtEfEc8BXgDRW3qQ4elXQEQN4+1o2TOsH0AEki3WO/PyI+XXV7qhQR50fEnIiYS+q8vSUi+vYbakT8FPixpJfn0ELg+xU2qWoPASdJOiD/f7OQPh700ORGYFl+vAy4oRsn7elSMX3kjcA7gXsl3ZNjH8qlcszeB3wpF339EfD7FbenMhFxu6T1wN2k0Zffpc/Kxki6BvjvwGGStgIrgU8A6yQtJyXhM7vyWi4VY2ZmRfAtMjMzK4QTjJmZFcIJxszMCuEEY2ZmhXCCMTOzQjjBmO0GSXMk3ZCrz/5Q0l/kYcBFvuZTeTu3pRLuf5N0R66WvEnSOd14HbM95QRj1qE8Qe8rwN/k6rO/BBwIfHQPz9vxvDRJLwauBv4wV0t+I/AuSb+5J20x6wYnGLPOnQz8IiK+ABARzwN/RPpgv1PScY0nSvqWpOMlTcvrcNyZi06eln//e5Kul/Q14O8lHShpo6S7Jd3beN4YzgGubKqm/R+kQp/n5vNfKemMpvY0roI6fR2zjnkmv1nnjgOGFdOMiCclPQR8HXg7sDLXdDoyIu6S9DFS2Zp3SToEuEPSN/PhrwdeFRHb81XMb+bzHQb8s6Qbo/2M6OMYKrPeMAiMtx7QLzp8HbOO+QrGrHMCRvsgFvAthspsvB24Pj9eBJyXS/l8C5gCvCT/bkNEbG86x8ck/SvwTdK6PrN2oy0T+Rs6eR2zjvkKxqxz9wG/3RzIC3sdBdwJ/KekVwG/A7y78RTgtyNiU8txJ5JK6Df8LjATOD4instVocda0vc+YIBUrLDheNJVDKR6W/vk1xLQGIjQ6euYdcxXMGad2wgcIOlsAEmTgP9N6gt5hrRMwJ8CB0fEvfmYm4H35Q95JL22zbkPJq1n85ykXwNeOk5bPgv8nqTX5PMeShpscFH+/YOkhANpHZR9d/N1zDrmBGPWodxP8ZvAmZI2A/9G6tP4UH7KetJSAeuaDruI9OH+r3mI8UWM7kvAgKRB0lXGD8ZpyyPAO4DVkjaRlv+9NCJuzU/5K+BXJd0BNF8tdfQ6ZrvD1ZTNekieA/OHwJsi4vGq22P9zQnGzMwK4VtkZmZWCCcYMzMrhBOMmZkVwgnGzMwK4QRjZmaFcIIxM7NC/H/UlDMZ5SBaJQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(New_dataset.OverallQual , New_dataset.SalePrice , color = 'magenta',marker='*')\n",
    "plt.xlabel(\"OverallQual\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(New_dataset.OverallCond , New_dataset.SalePrice , color = 'cyan',marker='*')\n",
    "plt.xlabel(\"OverallCond\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(New_dataset.MSZoning , New_dataset.SalePrice , color = 'black',marker='*')\n",
    "plt.xlabel(\"MSZoning\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(New_dataset.HouseStyle , New_dataset.SalePrice , color = 'green',marker='*')\n",
    "plt.xlabel(\"HouseStyle\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### mapping the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # print(New_dataset[\"MSZoning\"].dtype)\n",
    "# print(New_dataset[\"MSZoning\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          MSSubClass   LotFrontage   LotArea  OverallQual  OverallCond  \\\n",
      "MSZoning                                                                 \n",
      "C (all)          560    697.000000     95013           39           46   \n",
      "FV              5880   3951.399667    431526          468          327   \n",
      "RH              1285    976.149875    118081           84           89   \n",
      "RL             56830  84896.440466  13319158         7125         6371   \n",
      "RM             18515  11751.949209   1390791         1189         1307   \n",
      "\n",
      "          SalePrice  \n",
      "MSZoning             \n",
      "C (all)      745280  \n",
      "FV         13910914  \n",
      "RH          2104934  \n",
      "RL        219846749  \n",
      "RM         27537069  \n"
     ]
    }
   ],
   "source": [
    "print(New_dataset.groupby(\"MSZoning\").sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      MSSubClass  MSZoning  LotFrontage  LotArea HouseStyle  OverallQual  \\\n",
      "0             60         4         65.0     8450     2Story            7   \n",
      "1             20         4         80.0     9600     1Story            6   \n",
      "2             60         4         68.0    11250     2Story            7   \n",
      "3             70         4         60.0     9550     2Story            7   \n",
      "4             60         4         84.0    14260     2Story            8   \n",
      "...          ...       ...          ...      ...        ...          ...   \n",
      "1455          60         4         62.0     7917     2Story            6   \n",
      "1456          20         4         85.0    13175     1Story            6   \n",
      "1457          70         4         66.0     9042     2Story            7   \n",
      "1458          20         4         68.0     9717     1Story            5   \n",
      "1459          20         4         75.0     9937     1Story            5   \n",
      "\n",
      "      OverallCond  SalePrice  \n",
      "0               5     208500  \n",
      "1               8     181500  \n",
      "2               5     223500  \n",
      "3               5     140000  \n",
      "4               5     250000  \n",
      "...           ...        ...  \n",
      "1455            5     175000  \n",
      "1456            6     210000  \n",
      "1457            9     266500  \n",
      "1458            6     142125  \n",
      "1459            6     147500  \n",
      "\n",
      "[1460 rows x 8 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\harit\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:5516: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "# set1 = set(New_dataset.MSZoning)\n",
    "New_dataset.MSZoning = New_dataset.MSZoning.map({'C (all)':1,'FV':2, 'RH': 3, 'RL': 4, 'RM': 5,})\n",
    "print(New_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            MSSubClass  MSZoning   LotFrontage  LotArea  OverallQual  \\\n",
      "HouseStyle                                                             \n",
      "1.5Fin            8960       658   9941.899251  1763088          832   \n",
      "1.5Unf             760        62    780.049958    99662           77   \n",
      "1Story           26920      2917  51916.394671  7727841         4317   \n",
      "2.5Fin             710        34    630.000000    99745           51   \n",
      "2.5Unf            1055        49    688.049958   100686           72   \n",
      "2Story           35235      1743  31281.146545  4594699         2974   \n",
      "SFoyer            3890       156   2207.349709   283895          197   \n",
      "SLvl              5540       263   4828.049126   684953          385   \n",
      "\n",
      "            OverallCond  SalePrice  \n",
      "HouseStyle                          \n",
      "1.5Fin              921   22039978  \n",
      "1.5Unf               86    1542100  \n",
      "1Story             3972  127765457  \n",
      "2.5Fin               54    1760000  \n",
      "2.5Unf               66    1730900  \n",
      "2Story             2447   93473035  \n",
      "SFoyer              214    4997756  \n",
      "SLvl                380   10835720  \n"
     ]
    }
   ],
   "source": [
    "print(New_dataset.groupby(\"HouseStyle\").sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      MSSubClass  MSZoning  LotFrontage  LotArea  HouseStyle  OverallQual  \\\n",
      "0             60         4         65.0     8450           6            7   \n",
      "1             20         4         80.0     9600           5            6   \n",
      "2             60         4         68.0    11250           6            7   \n",
      "3             70         4         60.0     9550           6            7   \n",
      "4             60         4         84.0    14260           6            8   \n",
      "...          ...       ...          ...      ...         ...          ...   \n",
      "1455          60         4         62.0     7917           6            6   \n",
      "1456          20         4         85.0    13175           5            6   \n",
      "1457          70         4         66.0     9042           6            7   \n",
      "1458          20         4         68.0     9717           5            5   \n",
      "1459          20         4         75.0     9937           5            5   \n",
      "\n",
      "      OverallCond  SalePrice  \n",
      "0               5     208500  \n",
      "1               8     181500  \n",
      "2               5     223500  \n",
      "3               5     140000  \n",
      "4               5     250000  \n",
      "...           ...        ...  \n",
      "1455            5     175000  \n",
      "1456            6     210000  \n",
      "1457            9     266500  \n",
      "1458            6     142125  \n",
      "1459            6     147500  \n",
      "\n",
      "[1460 rows x 8 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\harit\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:5516: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "# set2 = set(New_dataset['HouseStyle'])\n",
    "New_dataset.HouseStyle= New_dataset.HouseStyle.map({'1.5Fin':1, '2.5Fin':2, '1.5Unf':3, '2.5Unf':4,\n",
    "                                                           '1Story':5, '2Story':6, 'SFoyer':7, 'SLvl':8,\n",
    "                                                          })\n",
    "print(New_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>4</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>70</td>\n",
       "      <td>4</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>266500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>142125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1460 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MSSubClass  MSZoning  LotFrontage  LotArea  HouseStyle  OverallQual  \\\n",
       "0             60         4         65.0     8450           6            7   \n",
       "1             20         4         80.0     9600           5            6   \n",
       "2             60         4         68.0    11250           6            7   \n",
       "3             70         4         60.0     9550           6            7   \n",
       "4             60         4         84.0    14260           6            8   \n",
       "...          ...       ...          ...      ...         ...          ...   \n",
       "1455          60         4         62.0     7917           6            6   \n",
       "1456          20         4         85.0    13175           5            6   \n",
       "1457          70         4         66.0     9042           6            7   \n",
       "1458          20         4         68.0     9717           5            5   \n",
       "1459          20         4         75.0     9937           5            5   \n",
       "\n",
       "      OverallCond  SalePrice  \n",
       "0               5     208500  \n",
       "1               8     181500  \n",
       "2               5     223500  \n",
       "3               5     140000  \n",
       "4               5     250000  \n",
       "...           ...        ...  \n",
       "1455            5     175000  \n",
       "1456            6     210000  \n",
       "1457            9     266500  \n",
       "1458            6     142125  \n",
       "1459            6     147500  \n",
       "\n",
       "[1460 rows x 8 columns]"
      ]
     },
     "execution_count": 735,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "New_dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JRyfB6prpJDP"
   },
   "source": [
    "### *Segregate Dataset into Input X & Output Y*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "metadata": {
    "id": "x9dQcTohpK1X"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1460, 7)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[60.,  4., 65., ...,  6.,  7.,  5.],\n",
       "       [20.,  4., 80., ...,  5.,  6.,  8.],\n",
       "       [60.,  4., 68., ...,  6.,  7.,  5.],\n",
       "       ...,\n",
       "       [70.,  4., 66., ...,  6.,  7.,  9.],\n",
       "       [20.,  4., 68., ...,  5.,  5.,  6.],\n",
       "       [20.,  4., 75., ...,  5.,  5.,  6.]])"
      ]
     },
     "execution_count": 736,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = New_dataset.iloc[:, :-1].values\n",
    "print(X.shape)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "metadata": {
    "id": "SqxVaBO0pf1W"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([208500, 181500, 223500, ..., 266500, 142125, 147500], dtype=int64)"
      ]
     },
     "execution_count": 737,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = New_dataset.iloc[:, -1].values\n",
    "Y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KsDoGjjbpmjk"
   },
   "source": [
    "### *Training Dataset using Linear Regression*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "metadata": {
    "id": "nKmEySI1poV_"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 738,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(X,Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "n-UeFqpGpw9p"
   },
   "source": [
    "### *Predicted Price for Land sq.Feet of custom values*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the MSSubClass : 60\n",
      "Enter the MSZoning (1-5): 4\n",
      "Enter the LotFrontage : 65\n",
      "Enter the LotArea : 8450\n",
      "Enter the HouseStyle(1-8): 6\n",
      "Enter the OverallQual : 7\n",
      "Enter the OverallCond : 5\n"
     ]
    }
   ],
   "source": [
    "MS = int(input(\"Enter the MSSubClass : \"))\n",
    "MZ= int(input(\"Enter the MSZoning (1-5): \"))\n",
    "LF = int(input(\"Enter the LotFrontage : \"))\n",
    "LA = int(input(\"Enter the LotArea : \"))\n",
    "HS = int(input(\"Enter the HouseStyle(1-8): \"))\n",
    "OQ= int(input(\"Enter the OverallQual : \"))\n",
    "OC= int(input(\"Enter the OverallCond : \"))\n",
    "#60 | 4 | 65.0 | 8450 | 6 | 7 | 5 | 208500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "metadata": {
    "id": "Ollo3wTcpyKQ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a :  [[60, 4, 65, 8450, 6, 7, 5]]\n",
      "Estimated price of the house :  [216890.84250239]\n"
     ]
    }
   ],
   "source": [
    "a=[[MS,MZ,LF,LA,HS,OQ,OC]]\n",
    "print(\"a : \",a)\n",
    "PredictedmodelResult = model.predict(a)\n",
    "print(\"Estimated price of the house : \", PredictedmodelResult)\n",
    "\n",
    "# Actual price=208500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m=model.coef_\n",
    "c=model.intercept_\n",
    "print(m)\n",
    "print(c)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "12 | Exam mark prediction using Linear Regression.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
